{"version":3,"sources":["FirebaseUI.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FirebaseUI","props","uiconfig","signedIn","console","log","firebase","apps","length","uiConfig","signInFlow","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","FacebookAuthProvider","EmailAuthProvider","GithubAuthProvider","PhoneAuthProvider","TwitterAuthProvider","callbacks","signInSuccessWithAuthResult","style","display","height","width","firebaseAuth","App","React","useState","config","setConfig","token","setToken","reload","setReload","setSignedIn","className","rows","cols","value","placeholder","onChange","event","target","onClick","fb_config","JSON","parse","initializeApp","err","error","currentUser","email","a","getIdToken","readOnly","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"gXAQe,SAASA,IAGsB,IAHXC,EAGU,uDAAvC,CAAEC,SAAU,GAAIC,SAAU,cAE5B,GADAC,QAAQC,IAAIC,IAASC,MACQ,IAAzBD,IAASC,KAAKC,OAChB,OAAO,8BACTJ,QAAQC,IAAIC,IAASC,MAErB,IAAME,EAAgC,aAEpCC,WAAY,QAEZC,cAAe,CACbL,IAASM,KAAKC,mBAAmBC,YACjCR,IAASM,KAAKG,qBAAqBD,YACnCR,IAASM,KAAKI,kBAAkBF,YAChCR,IAASM,KAAKK,mBAAmBH,YACjCR,IAASM,KAAKM,kBAAkBJ,YAChCR,IAASM,KAAKO,oBAAoBL,aAEpCM,UAAW,CAETC,4BAA6B,WAA8B,OAAtBpB,EAAME,UAAS,IAAc,KAEjEF,EAAMC,UAEX,OAAO,yBAAKoB,MAAO,CAAEC,QAAS,eAAgBC,OAAQ,MAAOC,MAAO,QAClE,kBAAC,IAAD,CAAoBhB,SAAUA,EAAUiB,aAAcpB,IAASM,UCkCtDe,MA/Df,WAAgB,IAAD,IACeC,IAAMC,SAAS,IAD9B,mBACNC,EADM,KACEC,EADF,OAEaH,IAAMC,SAAS,IAF5B,mBAENG,EAFM,KAECC,EAFD,OAGeL,IAAMC,UAAS,GAH9B,mBAGNK,EAHM,KAGEC,EAHF,OAImBP,IAAMC,UAAS,GAJlC,mBAIN1B,EAJM,KAIIiC,EAJJ,KAmBb,OACE,yBAAKC,UAAU,OACb,6BACE,+CACA,8BACEC,KAAM,EACNC,KAAM,GACNC,MAAOV,EACPW,YAAY,iBACZC,SAAU,SAAAC,GAAK,OAAIZ,EAAUY,EAAMC,OAAOJ,UAC5C,6BACA,4BAAQK,QAxBd,WACE,IACEV,GAAU,GACV/B,QAAQC,IAAIyB,GACZ,IAAMgB,EAAYC,KAAKC,MAAMlB,GAC7B1B,QAAQC,IAAI,IAAKyC,GACjBxC,IAAS2C,cAAcH,GACvBX,GAAU,GACV,MAAOe,GACP9C,QAAQ+C,MAAMD,MAeZ,iBAEF,6BACGhB,GAAU,kBAAClC,EAAD,CAAYE,SAAU,GAAIC,SAAUiC,KAEjD,6BAE2B,IAAzB9B,IAASC,KAAKC,QAAgBL,EAC5B,6BACE,wDACiBG,IAASM,OAAOwC,mBADjC,aACiB,EAA6BC,OAE9C,6BACA,4BAAQR,QAAO,sBAAE,8BAAAS,EAAA,gFACKhD,IAASM,OAAOwC,mBADrB,aACK,EAA6BG,aADlC,OACTvB,EADS,OAEfC,EAASD,GAFM,4CAAjB,aAMA,6BACA,8BACEM,KAAM,EACNC,KAAM,GACNC,MAAOR,EACPwB,UAAU,KAGZ,gCCpDQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtB,GACL/C,QAAQ+C,MAAMA,EAAMuB,c","file":"static/js/main.5a4da5ad.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\r\n\r\nimport * as firebaseui from 'firebaseui';\r\n\r\nexport default function FirebaseUI(props: {\r\n    uiconfig: firebaseui.auth.Config,\r\n    signedIn: (x: boolean) => void\r\n  } = { uiconfig: {}, signedIn: () => { } }) {\r\n    console.log(firebase.apps);\r\n    if (firebase.apps.length === 0)\r\n      return <div />;\r\n    console.log(firebase.apps);\r\n    // Configure FirebaseUI.\r\n    const uiConfig: firebaseui.auth.Config = {\r\n      // Popup signin flow rather than redirect flow.\r\n      signInFlow: 'popup',\r\n      // We will display Google and Facebook as auth providers.\r\n      signInOptions: [\r\n        firebase.auth.GoogleAuthProvider.PROVIDER_ID,\r\n        firebase.auth.FacebookAuthProvider.PROVIDER_ID,\r\n        firebase.auth.EmailAuthProvider.PROVIDER_ID,\r\n        firebase.auth.GithubAuthProvider.PROVIDER_ID,\r\n        firebase.auth.PhoneAuthProvider.PROVIDER_ID,\r\n        firebase.auth.TwitterAuthProvider.PROVIDER_ID\r\n      ],\r\n      callbacks: {\r\n        // Avoid redirects after sign-in.\r\n        signInSuccessWithAuthResult: () => { props.signedIn(true); return false; }\r\n      },\r\n      ...props.uiconfig\r\n    };\r\n    return <div style={{ display: \"inline-block\", height: \"50%\", width: \"70%\" }}>\r\n      <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\r\n    </div>;\r\n  \r\n  }\r\n  ","import React from 'react';\r\n\r\nimport './App.css';\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport FirebaseUI from './FirebaseUI';\r\n\r\nfunction App() {\r\n  const [config, setConfig] = React.useState(\"\");\r\n  const [token, setToken] = React.useState(\"\");\r\n  const [reload, setReload] = React.useState(false);\r\n  const [signedIn, setSignedIn] = React.useState(false);\r\n\r\n  function Init() {\r\n    try {\r\n      setReload(false);\r\n      console.log(config);\r\n      const fb_config = JSON.parse(config);\r\n      console.log(\"3\", fb_config);\r\n      firebase.initializeApp(fb_config);\r\n      setReload(true);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        <h2>Firebase Config</h2>\r\n        <textarea\r\n          rows={5}\r\n          cols={50}\r\n          value={config}\r\n          placeholder=\"Firebase Token\"\r\n          onChange={event => setConfig(event.target.value)} />\r\n        <br />\r\n        <button onClick={Init}>Check Config</button>\r\n      </div>\r\n      <div>\r\n        {reload && <FirebaseUI uiconfig={{}} signedIn={setSignedIn} />}\r\n      </div>\r\n      <br />\r\n      {\r\n        firebase.apps.length !== 0 && signedIn ?\r\n          <div>\r\n            <div>\r\n              Your Email is {firebase.auth().currentUser?.email}\r\n            </div>\r\n            <br />\r\n            <button onClick={async () => {\r\n              const token = await firebase.auth().currentUser?.getIdToken()!;\r\n              setToken(token);\r\n            }}>\r\n              Get Token\r\n        </button>\r\n            <br />\r\n            <textarea\r\n              rows={5}\r\n              cols={50}\r\n              value={token}\r\n              readOnly={true}\r\n            />\r\n          </div>\r\n          : <div />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}